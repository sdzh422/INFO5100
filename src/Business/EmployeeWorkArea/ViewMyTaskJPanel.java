/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Business.EmployeeWorkArea;

import Business.Analytics.DataAnalytic;
import Business.BookingSystem;
import Business.Department.Department;
import Business.Enterprise.Cinema;
import Business.Enterprise.Enterprise;
import Business.Graphic.DisplayJPanel;
import Business.Graphic.PaintBarChart;
import Business.Graphic.PaintPieChart;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.block.BlockBorder;

/**
 *
 * @author Stephanie
 */
public class ViewMyTaskJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private BookingSystem system;
    
    public ViewMyTaskJPanel(JPanel userProcessContainer,Enterprise enterprise,UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;   
        this.enterprise = enterprise;
        system = BookingSystem.getInstance();
         switch (userAccount.getDepartmentType())
        {
             case CINEMA_TICKET:
                 populateTable();
                 processBtn.setText("View");
                 break;
             case CINEMA_SERVICE:
                 populateTable_2();
                 processBtn.setText("View");
                 break;
            case SUPPLIER_SERVICE:
                populateTable_2();
                break;
            case SUPPLIER_TRANSPORTATION:
                populateTable();
                processBtn.setText("Update");
                break;
            case ANALYTICS_MOVIE:
            case ANALYTICS_USER:
                populateTable_2();   
                processBtn.setText("Update");
                break;
            default :
                populateTable_2();   
                processBtn.setVisible(false);
            break;
         }

    }

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        model.setRowCount(0);
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[3];
           String temp[] = request.getMessage().split(",");
            row[0] = temp[1];
            row[1] = request.getReceiver()==null?null:request.getReceiver().getEmployee().getName();
            row[2] = request;
            model.addRow(row);
        }
    }
    public void populateTable_2(){
         DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
         model.setRowCount(0);
         model.setColumnIdentifiers(new String[] {"Message","Sender","Status"});
         for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[3];
            String temp[] = request.getMessage().split(",");
            row[0] = temp[1];
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request;
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        processBtn = new javax.swing.JButton();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        processBtn.setText("Delivered");
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(283, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(processBtn)
                    .addComponent(jButton1))
                .addGap(54, 54, 54))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                .addComponent(processBtn)
                .addGap(41, 41, 41))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed
 
        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select any row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(row, 2);
        switch (userAccount.getDepartmentType()) {
            case CINEMA_SERVICE:
            case CINEMA_TICKET:
                if (!request.getStatus().equals("Finished")) {
                    JOptionPane.showMessageDialog(null, "Please wait", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                DisplayJPanel display = new DisplayJPanel(userProcessContainer, request.getMessage());
                userProcessContainer.add("DisplayJPanel", display);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
                break;
            case SUPPLIER_SERVICE:
                request.setStatus("Delivered");
                Department department = enterprise.getDepartmentDirectory().getDeparmentList().get(1);
                department.getWorkQueue().getWorkRequestList().add(request);        
                JOptionPane.showMessageDialog(null, "Sent Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
            case SUPPLIER_TRANSPORTATION:
                request.setStatus("Finished");
                JOptionPane.showMessageDialog(null, "Sent Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
            case ANALYTICS_MOVIE:
                TicketAnalysis(request);
                request.setStatus("Finished");
                JOptionPane.showMessageDialog(null, "Sent Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
            case ANALYTICS_USER:
                String temp[] = request.getMessage().split(",");
                switch (Integer.valueOf(temp[0]) ){
                    case 1:
                        MoviePerformence(request);
                        break;
                    case 2:
                    FoodSales(request);
                break;
                    case 3:
                        FoodRequestAnalysis(request);
                        break;
                }
                request.setStatus("Finished");
                JOptionPane.showMessageDialog(null, "Sent Successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }//GEN-LAST:event_processBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed
public void TicketAnalysis(WorkRequest workrequest)
{
        String temp[] = workrequest.getMessage().split(",");
        String name = temp[2];
        Cinema cinema = (Cinema) system.searchCinema(name);
        DataAnalytic testanalytic = new DataAnalytic();
        Map<Integer, Double> ticket = testanalytic.toMap(cinema.getTicket_test());
        PaintBarChart pbc = new PaintBarChart();
        JFreeChart chart = pbc.PaintChart("Movie Box Office", "Movie", "Tickets", ticket, cinema.getMovie());
        writeImg(chart, workrequest.getMessage());
    }
public void MoviePerformence(WorkRequest workrequest)
{
        String temp[] = workrequest.getMessage().split(",");
        String name = temp[2];
        Cinema cinema = (Cinema) system.searchCinema(name);
        DataAnalytic testanalytic = new DataAnalytic();
        Map<Integer, Double> movieperformance = testanalytic.toMap_performence(cinema.getMovieperformence_test());
        PaintBarChart pbc = new PaintBarChart();
        JFreeChart chart = pbc.PaintChart("Movie Performance", "Movie", "Performance", movieperformance, cinema.getMovie());
        chart.getLegend().setFrame(new BlockBorder(Color.WHITE));
        writeImg(chart, workrequest.getMessage());
}
public void FoodSales(WorkRequest workrequest)
{
        String temp[] = workrequest.getMessage().split(",");
        String name = temp[2];
        Cinema cinema = (Cinema) system.searchCinema(name);
        DataAnalytic testanalytic = new DataAnalytic();
        Map<Integer, Double> sale = testanalytic.toMap(cinema.getFood_test());
        PaintPieChart ppc = new PaintPieChart();
        JFreeChart chart = ppc.PaintChart("Food Sale", null, null, sale, cinema.getFood());
        chart.getLegend().setFrame(new BlockBorder(Color.WHITE));
        writeImg(chart, workrequest.getMessage());
    }
public void FoodRequestAnalysis(WorkRequest workrequest)
{
        String temp[] = workrequest.getMessage().split(",");
        String name = temp[2];
        Cinema cinema = (Cinema) system.searchCinema(name);
        DataAnalytic testanalytic = new DataAnalytic();
        ArrayList<WorkRequest> request = testanalytic.changeType(cinema.getDepartmentDirectory().getDeparmentList().get(1).getWorkQueue().getWorkRequestList());
        if(request.size()==0)
        {
             JOptionPane.showMessageDialog(null, "No request information", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Map<Integer, Double> sale = testanalytic.toMap(request);
        PaintPieChart ppc = new PaintPieChart();
        JFreeChart chart = ppc.PaintChart("Food Request", null, null, sale, cinema.getFood());
        chart.getLegend().setFrame(new BlockBorder(Color.WHITE));
        writeImg(chart, workrequest.getMessage());
}
 public void writeImg(JFreeChart chart,String Imgpath)
    {
        try {
            FileOutputStream chartjpg = null;
            chartjpg = new FileOutputStream(Imgpath);
            ChartUtilities.writeChartAsJPEG(chartjpg, 1.0f, chart, 1680, 1050, null);  //change width and height
            chartjpg.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
